//MIT License
//
//Copyright (c) 2017 tvelliott
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

package firgen;

import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Font;
import java.awt.image.*;
import java.awt.*;
import javax.swing.*;
import java.util.prefs.*; 

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.Range;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import org.jfree.ui.Layer;
import org.jfree.ui.RectangleAnchor;
import org.jfree.ui.TextAnchor;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

import java.net.*;
import java.util.*;
import java.io.*;


/**
 *
 * @author elliott
 */
public class firGen extends javax.swing.JFrame {

//main mag chart
JFreeChart mag_chart;
NumberAxis mag_domainAxis;
XYSeriesCollection mag_series_collection;
XYSeries mag_data;
XYSeries inv_sinc_data;

//sim charts
JFreeChart sim_chart1;
JFreeChart sim_chart2;
XYSeriesCollection sim_series1;
XYSeriesCollection sim_series2;
XYSeries sim_data1;
XYSeries sim_data2;

String verilog_output="";

JFrame sim_frame;

Preferences prefs;

    ////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////
    public firGen() {
        initComponents();

        setTitle("FIR Gen");
        setSize(1200,800);

        prefs = Preferences.userRoot().node(this.getClass().getName());

        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;

        // Move the window
        this.setLocation(x, y);

        sim_frame = new JFrame();
        sim_frame.setSize(1024,768);

        JPanel sim_panel = new JPanel();
        sim_panel.setLayout(new javax.swing.BoxLayout(sim_panel, javax.swing.BoxLayout.Y_AXIS));

        sim_panel.add( createSimChart1() );
        sim_panel.add( createSimChart2() );

        sim_frame.getContentPane().add( sim_panel );


        mag_panel.add( createDemoPanel() );

        run_proc();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        bandwidth = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        filt_len = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        window_type = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        alpha = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        outtype = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        data_type = new javax.swing.JComboBox();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        gain_tf = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jSeparator10 = new javax.swing.JSeparator();
        sinc_correction = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        sinc_gain = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        genSim = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        genCode = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        update = new javax.swing.JButton();
        main_panel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        mag_panel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        console_tf = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jLabel3.setText("BW (Fc/Fs) ");
        jPanel2.add(jLabel3);

        bandwidth.setColumns(4);
        bandwidth.setText("0.15");
        jPanel2.add(bandwidth);
        jPanel2.add(jSeparator4);

        jLabel2.setText("Filter Len");
        jPanel2.add(jLabel2);

        filt_len.setColumns(4);
        filt_len.setText("31");
        filt_len.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filt_lenActionPerformed(evt);
            }
        });
        jPanel2.add(filt_len);
        jPanel2.add(jSeparator3);

        window_type.setMaximumRowCount(15);
        window_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hamming", "Blackman", "Kaiser (alpha)", "Hann", "Blackman-Nuttall", "Blackman-Harris", "Flat-Top", "Triangle", "Sine", "Welch", "Gaussian (alpha)", "Rectangular" }));
        window_type.setSelectedIndex(4);
        jPanel2.add(window_type);
        jPanel2.add(jSeparator2);
        jPanel2.add(jSeparator5);

        jLabel4.setText("alpha");
        jPanel2.add(jLabel4);

        alpha.setColumns(4);
        alpha.setText("2");
        jPanel2.add(alpha);
        jPanel2.add(jSeparator6);

        jLabel1.setText("OType");
        jPanel2.add(jLabel1);

        outtype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C-Code", "Matlab", "Verilog", "Java" }));
        outtype.setSelectedIndex(2);
        outtype.setEnabled(false);
        jPanel2.add(outtype);
        jPanel2.add(jSeparator1);

        jLabel5.setText("DType");
        jPanel2.add(jLabel5);

        data_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Double (64-bit)", "Float (32-bit)", "Int (32-bit)", "Short (16-bit)", "Byte (8-bit)" }));
        data_type.setSelectedIndex(4);
        jPanel2.add(data_type);
        jPanel2.add(jSeparator7);

        jLabel6.setText("Gain");
        jPanel2.add(jLabel6);

        gain_tf.setColumns(4);
        gain_tf.setText("0.27");
        jPanel2.add(gain_tf);

        jPanel1.add(jPanel2);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jSeparator10.setMinimumSize(new java.awt.Dimension(100, 0));
        jSeparator10.setPreferredSize(new java.awt.Dimension(100, 0));
        jPanel5.add(jSeparator10);

        sinc_correction.setText("SINC correction");
        sinc_correction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinc_correctionActionPerformed(evt);
            }
        });
        jPanel5.add(sinc_correction);

        jLabel7.setText("Gain");
        jPanel5.add(jLabel7);

        sinc_gain.setColumns(4);
        sinc_gain.setText("1.0");
        jPanel5.add(sinc_gain);

        jPanel1.add(jPanel5);

        genSim.setText("genSim");
        genSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSimActionPerformed(evt);
            }
        });
        jPanel4.add(genSim);
        jPanel4.add(jSeparator8);

        genCode.setText("genCode");
        genCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genCodeActionPerformed(evt);
            }
        });
        jPanel4.add(genCode);
        jPanel4.add(jSeparator9);

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel4.add(update);

        jPanel1.add(jPanel4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        main_panel.setLayout(new javax.swing.BoxLayout(main_panel, javax.swing.BoxLayout.Y_AXIS));

        jSplitPane1.setDividerLocation(450);
        jSplitPane1.setDividerSize(20);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.1);

        mag_panel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setTopComponent(mag_panel);

        jPanel3.setLayout(new java.awt.BorderLayout());

        console_tf.setColumns(20);
        console_tf.setRows(5);
        jScrollPane2.setViewportView(console_tf);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setBottomComponent(jPanel3);

        main_panel.add(jSplitPane1);

        getContentPane().add(main_panel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
      run_proc();
    }//GEN-LAST:event_updateActionPerformed

    private void filt_lenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filt_lenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filt_lenActionPerformed

    private void genCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genCodeActionPerformed
      try {
        javax.swing.JFileChooser fd_save = new javax.swing.JFileChooser();
        fd_save.setCurrentDirectory( new File(prefs.get("gen_dir","~")));

        int returnval = fd_save.showSaveDialog(this);
        if(returnval == javax.swing.JFileChooser.APPROVE_OPTION) {
          try {
            save_gendir( fd_save.getSelectedFile().getParent() );

            PrintWriter writer = new PrintWriter(fd_save.getSelectedFile().getAbsolutePath());
            writer.print( verilog_output );
            writer.close();

          } catch(Exception e) {
            e.printStackTrace();
          }
        }
      } catch(Exception e) {
        e.printStackTrace();
      }
    }//GEN-LAST:event_genCodeActionPerformed

      private void save_gendir(String str)
      {
        try {
          prefs.put( "gen_dir", str);
          System.out.println("\r\nsaved to : "+str);
        } catch(Exception e) {
          e.printStackTrace();
        }
      }

    private void genSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSimActionPerformed
      sim_frame.setVisible(true);
    }//GEN-LAST:event_genSimActionPerformed

    private void sinc_correctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinc_correctionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sinc_correctionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(firGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(firGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(firGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(firGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new firGen().setVisible(true);
            }
        });
    }


    public JPanel createDemoPanel() {

      mag_series_collection = new XYSeriesCollection();

      mag_chart = createChart(mag_series_collection, true, "Low-Pass Filter Mag Response", "<-    -Fs/2                                0 Hz                              +Fs/2     ->", "Mag dB 20*log10", 0, 1999);
      ChartPanel panel = new ChartPanel(mag_chart);
      panel.setMouseWheelEnabled(true);

      return panel;
    }

    public JPanel createSimChart1() {
      sim_series1 = new XYSeriesCollection();

      int test_data_len = 400+512; 

      sim_chart1 = createChart(sim_series1, false, "Test Data No Filter", "Sample Count", "8-bit, Signed, Sample Value", 0, test_data_len); 
      ChartPanel panel = new ChartPanel(sim_chart1);
      panel.setMouseWheelEnabled(true);

      return panel;
    }
    public JPanel createSimChart2() {
      sim_series2 = new XYSeriesCollection();

      int test_data_len = 400+512; 

      sim_chart2 = createChart(sim_series2, false, "Test Data Filtered", "Sample Count", "Sample Value Post Filter Gain",0, test_data_len); 
      ChartPanel panel = new ChartPanel(sim_chart2);
      panel.setMouseWheelEnabled(true);

      return panel;
    }



    public JFreeChart createChart(XYDataset xy_data_set, boolean do_fixed_domain, String str1, String str2, String str3, int x0, int x1) {

        // create the chart...
        JFreeChart chart = ChartFactory.createXYLineChart(
            str1,      // chart title
            str2,                      // x axis label
            str3,                      // y axis label
            xy_data_set,                  // data
            PlotOrientation.VERTICAL,
            false,                     // include legend
            false,                     // tooltips
            false                     // urls
        );


        // get a reference to the plot for further customisation...
        XYPlot plot = (XYPlot) chart.getPlot();


        plot.setDomainPannable(true);
        plot.setRangePannable(true);



        if(do_fixed_domain) {
          XYLineAndShapeRenderer renderer
                  = (XYLineAndShapeRenderer) plot.getRenderer();
          renderer.setBaseShapesVisible(true);
          renderer.setBaseShapesFilled(true);

        }
          // change the auto tick unit selection to integer units only...
          mag_domainAxis = (NumberAxis) plot.getDomainAxis();
          mag_domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
          mag_domainAxis.setRange(new Range((double) x0, (double) x1));

        return chart;
    }

    public void run_proc() {

      String s = null;

      try {

        String cmd_line="./basic_fir_filter ";

        //-d0 -b0.2 -l57 -c0 -w0");

        cmd_line = cmd_line.concat( String.format("-d%d ", data_type.getSelectedIndex()) ); 
        cmd_line = cmd_line.concat( String.format("-b%s ", bandwidth.getText().trim()) ); 
        cmd_line = cmd_line.concat( String.format("-l%s ", filt_len.getText().trim()) ); 
        cmd_line = cmd_line.concat( String.format("-c%d ", outtype.getSelectedIndex()) ); 
        cmd_line = cmd_line.concat( String.format("-w%d ", window_type.getSelectedIndex()) ); 
        cmd_line = cmd_line.concat( String.format("-g%s ", gain_tf.getText()) ); 
        cmd_line = cmd_line.concat( String.format("-a%s ", alpha.getText()) ); 
        if( sinc_correction.isSelected() ) {
          cmd_line = cmd_line.concat( String.format("-s%s ", sinc_gain.getText()) ); 
        }

        System.out.println("executing "+cmd_line);


        Process p = Runtime.getRuntime().exec(cmd_line);

        BufferedReader stdInput = new BufferedReader(new 
        InputStreamReader(p.getInputStream()));

        BufferedReader stdError = new BufferedReader(new 
        InputStreamReader(p.getErrorStream()));

        double sample_count=0;
        mag_series_collection.removeAllSeries();
        mag_data = new XYSeries("Filter Mag Plot");
        mag_series_collection.addSeries(mag_data);

        String console="";


        while ((s = stdInput.readLine()) != null) {
          if( s.contains("coef[]") ) {
            console = console.concat(s+"\n"); 
            break;
          }
        }

        while ((s = stdInput.readLine()) != null) {

          if(s!=null && s.length() > 0) {
            console = console.concat(s+"\n"); 
          }

          if(s.contains("};")) break;
        }

        while ((s = stdInput.readLine()) != null) {
          if(s.contains("end_mag")) break;

          try {
            Double psd = new Double(s);
            mag_data.add(new XYDataItem(sample_count++, psd.doubleValue()));
          } catch(Exception e) {
          }
        }


        sim_series1.removeAllSeries();
        sim_data1 = new XYSeries("Test Data");
        sim_series1.addSeries(sim_data1);

        boolean found_test_data=false;
        sample_count=0;
        while ((s = stdInput.readLine()) != null) {
          if(s.contains("end_test_data")) break;

          if(found_test_data) {
            try {
              Double val = new Double(s);
              sim_data1.add(new XYDataItem(sample_count++, val.doubleValue()));
            } catch(Exception e) {
            }
          }
          if(s.contains("start_test_data")) {
            System.out.println("found test data");
            found_test_data=true;
          }
        }

        sim_series2.removeAllSeries();
        sim_data2 = new XYSeries("Filtered Test Data");
        sim_series2.addSeries(sim_data2);

        boolean found_filter_data=false;
        sample_count= -1 * Integer.valueOf( filt_len.getText().trim() )  / 2;

        while ((s = stdInput.readLine()) != null) {

          if(s.contains("end_test_filter")) break;

          if(found_filter_data) {
            try {
              Double val = new Double(s);
              sim_data2.add(new XYDataItem(sample_count++, val.doubleValue()));
            } catch(Exception e) {
            }
          }
          if(s.contains("start_test_filter")) {
            found_filter_data=true;
            System.out.println("found filter data");
          }
        }

        verilog_output="";
        while ((s = stdInput.readLine()) != null) {
          System.out.println(s);
          verilog_output = verilog_output.concat(s+"\n");
        }


        if( data_type.getSelectedIndex()==4) { 
          String separate = "------------------------------------------------------";
          console_tf.setText(console+separate+verilog_output);
          console_tf.setCaretPosition(0);
        }
        else {
          console_tf.setText(console);
        }

        // read any errors from the attempted command
        //System.out.println("Here is the standard error of the command (if any):\n");
        //while ((s = stdError.readLine()) != null) {
        //System.out.println(s);
        //}

        //System.exit(0);
      }
      catch (IOException e) {
        e.printStackTrace();
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alpha;
    private javax.swing.JTextField bandwidth;
    private javax.swing.JTextArea console_tf;
    private javax.swing.JComboBox data_type;
    private javax.swing.JTextField filt_len;
    private javax.swing.JTextField gain_tf;
    private javax.swing.JButton genCode;
    private javax.swing.JButton genSim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mag_panel;
    private javax.swing.JPanel main_panel;
    private javax.swing.JComboBox outtype;
    private javax.swing.JCheckBox sinc_correction;
    private javax.swing.JTextField sinc_gain;
    private javax.swing.JButton update;
    private javax.swing.JComboBox window_type;
    // End of variables declaration//GEN-END:variables
}

